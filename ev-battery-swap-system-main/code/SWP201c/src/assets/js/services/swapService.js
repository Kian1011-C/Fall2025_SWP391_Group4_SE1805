// Swap Service
// Handle battery swap transactions and operations

import { apiUtils } from '../config/api.js';

class SwapService {
  // Get active swap sessions for user
  async getActiveSwaps(userId) {
    try {
      console.log('SwapService: Get active swaps', userId);
      
      const response = await apiUtils.get('/api/batteries/swap/active', { userId });
      
      if (response.success) {
        return {
          success: true,
          data: response.data || [],
          total: response.total || 0,
          message: 'L·∫•y giao d·ªãch ƒëang th·ª±c hi·ªán th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ l·∫•y giao d·ªãch ƒëang th·ª±c hi·ªán');
      }
    } catch (error) {
      console.error('Get active swaps error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi l·∫•y giao d·ªãch ƒëang th·ª±c hi·ªán',
        data: [],
        error: errorInfo
      };
    }
  }

  // Get swap history for user
  async getSwapHistory(userId, filters = {}) {
    try {
      console.log('SwapService: Get swap history', userId);
      
      const response = await apiUtils.get(`/api/users/${userId}/swaps`, filters);
      
      if (response.success) {
        return {
          success: true,
          data: response.data || [],
          total: response.total || 0,
          message: 'L·∫•y l·ªãch s·ª≠ ƒë·ªïi pin th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ ƒë·ªïi pin');
      }
    } catch (error) {
      console.error('Get swap history error:', error);
      const errorInfo = apiUtils.handleError(error);
      
      // SwapController ch∆∞a ƒë∆∞·ª£c implement, return empty data
      console.warn('SwapController ch∆∞a ƒë∆∞·ª£c implement, tr·∫£ v·ªÅ d·ªØ li·ªáu r·ªóng');
      return {
        success: true,
        data: [],
        total: 0,
        message: 'Ch∆∞a c√≥ l·ªãch s·ª≠ ƒë·ªïi pin (API ch∆∞a ƒë∆∞·ª£c tri·ªÉn khai)',
        error: errorInfo
      };
    }
  }

  // Get swap details by ID
  async getSwapDetails(swapId) {
    try {
      console.log('SwapService: Get swap details', swapId);
      
      const response = await apiUtils.get(`/api/swaps/${swapId}`);
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'L·∫•y chi ti·∫øt giao d·ªãch th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ l·∫•y chi ti·∫øt giao d·ªãch');
      }
    } catch (error) {
      console.error('Get swap details error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi l·∫•y chi ti·∫øt giao d·ªãch',
        error: errorInfo
      };
    }
  }

  // Initiate battery swap
  async initiateSwap(swapData) {
    try {
      console.log('SwapService: Initiate swap', swapData);
      
      const response = await apiUtils.post('/api/batteries/swap/initiate', swapData);
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'Kh·ªüi t·∫°o ƒë·ªïi pin th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ kh·ªüi t·∫°o ƒë·ªïi pin');
      }
    } catch (error) {
      console.error('Initiate swap error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi kh·ªüi t·∫°o ƒë·ªïi pin',
        error: errorInfo
      };
    }
  }

  // Confirm battery swap
  async confirmSwap(swapId, confirmationData = {}) {
    try {
      console.log('SwapService: Confirm swap', swapId, confirmationData);
      
      const response = await apiUtils.post(`/api/batteries/swap/${swapId}/confirm`, confirmationData);
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'X√°c nh·∫≠n ƒë·ªïi pin th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ x√°c nh·∫≠n ƒë·ªïi pin');
      }
    } catch (error) {
      console.error('Confirm swap error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi x√°c nh·∫≠n ƒë·ªïi pin',
        error: errorInfo
      };
    }
  }

  // Cancel battery swap
  async cancelSwap(swapId, cancelReason = '') {
    try {
      console.log('SwapService: Cancel swap', swapId, cancelReason);
      
      const response = await apiUtils.post(`/api/swaps/${swapId}/cancel`, { reason: cancelReason });
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'H·ªßy ƒë·ªïi pin th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ h·ªßy ƒë·ªïi pin');
      }
    } catch (error) {
      console.error('Cancel swap error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi h·ªßy ƒë·ªïi pin',
        error: errorInfo
      };
    }
  }

  // Book a swap slot at station
  async bookSwapSlot(bookingData) {
    try {
      console.log('SwapService: Book swap slot', bookingData);
      
      const response = await apiUtils.post('/api/swaps/book-slot', bookingData);
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'ƒê·∫∑t ch·ªó ƒë·ªïi pin th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ ƒë·∫∑t ch·ªó ƒë·ªïi pin');
      }
    } catch (error) {
      console.error('Book swap slot error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi ƒë·∫∑t ch·ªó ƒë·ªïi pin',
        error: errorInfo
      };
    }
  }

  // Get available slots at station
  async getAvailableSlots(stationId, dateTime) {
    try {
      console.log('SwapService: Get available slots', stationId, dateTime);
      
      const response = await apiUtils.get(`/api/stations/${stationId}/available-slots`, { dateTime });
      
      if (response.success) {
        return {
          success: true,
          data: response.data || [],
          message: 'L·∫•y ch·ªó tr·ªëng th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ l·∫•y ch·ªó tr·ªëng');
      }
    } catch (error) {
      console.error('Get available slots error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi l·∫•y ch·ªó tr·ªëng',
        data: [],
        error: errorInfo
      };
    }
  }

  // Get estimated swap time
  async getEstimatedSwapTime(stationId) {
    try {
      console.log('SwapService: Get estimated swap time', stationId);
      
      const response = await apiUtils.get(`/api/stations/${stationId}/estimated-time`);
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'L·∫•y th·ªùi gian ∆∞·ªõc t√≠nh th√†nh c√¥ng'
        };
      } else {
        // Return default estimate if API fails
        return {
          success: true,
          data: { estimatedTime: 300, queueLength: 0 }, // 5 minutes default
          message: 'Th·ªùi gian ∆∞·ªõc t√≠nh m·∫∑c ƒë·ªãnh'
        };
      }
    } catch (error) {
      console.error('Get estimated swap time error:', error);
      return {
        success: true,
        data: { estimatedTime: 300, queueLength: 0 },
        message: 'Th·ªùi gian ∆∞·ªõc t√≠nh m·∫∑c ƒë·ªãnh'
      };
    }
  }

  // Rate swap experience
  async rateSwapExperience(swapId, rating, feedback = '') {
    try {
      console.log('SwapService: Rate swap experience', swapId, rating);
      
      const response = await apiUtils.post(`/api/swaps/${swapId}/rate`, { 
        rating, 
        feedback 
      });
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'ƒê√°nh gi√° th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ ƒë√°nh gi√°');
      }
    } catch (error) {
      console.error('Rate swap experience error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi ƒë√°nh gi√°',
        error: errorInfo
      };
    }
  }

  // Get swap statistics for user
  async getUserSwapStatistics(userId, period = 'month') {
    try {
      console.log('SwapService: Get user swap statistics', userId, period);
      
      const response = await apiUtils.get(`/api/users/${userId}/swap-statistics`, { period });
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'L·∫•y th·ªëng k√™ ƒë·ªïi pin th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ l·∫•y th·ªëng k√™ ƒë·ªïi pin');
      }
    } catch (error) {
      console.error('Get user swap statistics error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi l·∫•y th·ªëng k√™ ƒë·ªïi pin',
        data: this.getDefaultStatistics(),
        error: errorInfo
      };
    }
  }

  // Get swap statuses
  getSwapStatuses() {
    return [
      { id: 'INITIATED', name: 'ƒê√£ kh·ªüi t·∫°o', color: '#ffa726', icon: '‚è≥' },
      { id: 'IN_PROGRESS', name: 'ƒêang th·ª±c hi·ªán', color: '#42a5f5', icon: 'üîÑ' },
      { id: 'COMPLETED', name: 'Ho√†n th√†nh', color: '#19c37d', icon: '‚úÖ' },
      { id: 'CANCELLED', name: 'ƒê√£ h·ªßy', color: '#f44336', icon: '‚ùå' },
      { id: 'FAILED', name: 'Th·∫•t b·∫°i', color: '#ff5722', icon: '‚ö†Ô∏è' }
    ];
  }

  // Get cancel reasons
  getCancelReasons() {
    return [
      'Kh√¥ng t√¨m th·∫•y pin ph√π h·ª£p',
      'Tr·∫°m b·∫£o tr√¨',
      'Thay ƒë·ªïi l·ªãch tr√¨nh',
      'S·ª± c·ªë k·ªπ thu·∫≠t',
      'L√Ω do c√° nh√¢n kh√°c'
    ];
  }

  // Format swap duration
  formatSwapDuration(startTime, endTime) {
    if (!startTime || !endTime) return 'N/A';
    
    const duration = new Date(endTime) - new Date(startTime);
    const minutes = Math.floor(duration / 60000);
    const seconds = Math.floor((duration % 60000) / 1000);
    
    if (minutes > 0) {
      return `${minutes}:${seconds.toString().padStart(2, '0')}`;
    }
    return `${seconds}s`;
  }

  // Calculate swap efficiency
  calculateSwapEfficiency(estimatedTime, actualTime) {
    if (!estimatedTime || !actualTime) return null;
    
    const efficiency = (estimatedTime / actualTime) * 100;
    return Math.round(efficiency * 10) / 10; // Round to 1 decimal place
  }

  // Get default statistics (fallback)
  getDefaultStatistics() {
    return {
      totalSwaps: 0,
      successRate: 0,
      averageTime: 0,
      totalTimeSaved: 0,
      favoriteStation: null,
      monthlySummary: {
        thisMonth: 0,
        lastMonth: 0,
        change: 0
      }
    };
  }

  // Check if swap is in progress
  isSwapInProgress(swapStatus) {
    return ['INITIATED', 'IN_PROGRESS'].includes(swapStatus);
  }

  // Check if swap can be cancelled
  canCancelSwap(swapStatus) {
    return ['INITIATED'].includes(swapStatus);
  }

  // Check if swap can be rated
  canRateSwap(swapStatus, hasRating) {
    return swapStatus === 'COMPLETED' && !hasRating;
  }

  // Request staff assistance for battery swap
  async requestStaffAssistance(assistanceData) {
    try {
      console.log('SwapService: Request staff assistance', assistanceData);
      
      // NOTE: Backend does not have /api/swaps/request-assistance endpoint yet
      // Using MOCK mode until backend API is implemented
      const MOCK_MODE = true; // Keep true - backend endpoint not available
      
      if (MOCK_MODE) {
        console.log('‚ö†Ô∏è MOCK MODE: Simulating staff assistance request (Backend API not available)');
        
        // Simulate API delay
        await new Promise(resolve => setTimeout(resolve, 1500));
        
        // Mock successful response
        return {
          success: true,
          data: {
            requestId: `ASSIST_${Date.now().toString().slice(-8)}`,
            status: 'pending',
            priority: assistanceData.currentBatteryLevel <= 10 ? 'urgent' : 
                     assistanceData.currentBatteryLevel <= 20 ? 'high' : 'normal',
            estimatedResponseTime: '5-10 ph√∫t',
            message: 'Y√™u c·∫ßu h·ªó tr·ª£ ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn nh√¢n vi√™n tr·∫°m',
            requestTime: new Date().toISOString(),
            stationName: assistanceData.stationName,
            vehiclePlate: assistanceData.vehiclePlate
          },
          message: 'Y√™u c·∫ßu h·ªó tr·ª£ t·ª´ nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng'
        };
      }
      
      // Real API call (when backend endpoint is ready)
      const response = await apiUtils.post('/api/swaps/request-assistance', assistanceData);
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'Y√™u c·∫ßu h·ªó tr·ª£ t·ª´ nh√¢n vi√™n ƒë√£ ƒë∆∞·ª£c g·ª≠i th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ g·ª≠i y√™u c·∫ßu h·ªó tr·ª£');
      }
    } catch (error) {
      console.error('Request staff assistance error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi g·ª≠i y√™u c·∫ßu h·ªó tr·ª£ t·ª´ nh√¢n vi√™n',
        error: errorInfo
      };
    }
  }

  // Get pending assistance requests for staff
  async getPendingAssistanceRequests(stationId = null) {
    try {
      console.log('SwapService: Get pending assistance requests', stationId);
      
      const params = stationId ? { stationId } : {};
      const response = await apiUtils.get('/api/swaps/assistance-requests', params);
      
      if (response.success) {
        return {
          success: true,
          data: response.data || [],
          total: response.total || 0,
          message: 'L·∫•y danh s√°ch y√™u c·∫ßu h·ªó tr·ª£ th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch y√™u c·∫ßu h·ªó tr·ª£');
      }
    } catch (error) {
      console.error('Get pending assistance requests error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi l·∫•y danh s√°ch y√™u c·∫ßu h·ªó tr·ª£',
        data: [],
        error: errorInfo
      };
    }
  }

  // Accept assistance request (for staff)
  async acceptAssistanceRequest(requestId, staffId) {
    try {
      console.log('SwapService: Accept assistance request', requestId, staffId);
      
      const response = await apiUtils.post(`/api/swaps/assistance-requests/${requestId}/accept`, { staffId });
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'Ch·∫•p nh·∫≠n y√™u c·∫ßu h·ªó tr·ª£ th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ ch·∫•p nh·∫≠n y√™u c·∫ßu h·ªó tr·ª£');
      }
    } catch (error) {
      console.error('Accept assistance request error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi ch·∫•p nh·∫≠n y√™u c·∫ßu h·ªó tr·ª£',
        error: errorInfo
      };
    }
  }

  // Complete assistance request (for staff)
  async completeAssistanceRequest(requestId, completionData) {
    try {
      console.log('SwapService: Complete assistance request', requestId, completionData);
      
      const response = await apiUtils.post(`/api/swaps/assistance-requests/${requestId}/complete`, completionData);
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'Ho√†n th√†nh h·ªó tr·ª£ ƒë·ªïi pin th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ ho√†n th√†nh h·ªó tr·ª£');
      }
    } catch (error) {
      console.error('Complete assistance request error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi ho√†n th√†nh h·ªó tr·ª£ ƒë·ªïi pin',
        error: errorInfo
      };
    }
  }

  // Create a new swap session
  async createSwap(data) {
    try {
      console.log('SwapService: Create swap', data);

      const response = await apiUtils.post('/api/batteries/swap', data);

      if (response.success) {
        return {
          success: true,
          data: response.data || {},
          message: 'T·∫°o giao d·ªãch ƒë·ªïi pin th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫°o giao d·ªãch ƒë·ªïi pin');
      }
    } catch (error) {
      console.error('Create swap error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi t·∫°o giao d·ªãch ƒë·ªïi pin',
        data: {},
        error: errorInfo
      };
    }
  }

  // Update an existing swap session
  async updateSwap(swapId, data) {
    try {
      console.log('SwapService: Update swap', swapId, data);

      const response = await apiUtils.put(`/api/batteries/swap/${swapId}`, data);

      if (response.success) {
        return {
          success: true,
          data: response.data || {},
          message: 'C·∫≠p nh·∫≠t giao d·ªãch ƒë·ªïi pin th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t giao d·ªãch ƒë·ªïi pin');
      }
    } catch (error) {
      console.error('Update swap error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi c·∫≠p nh·∫≠t giao d·ªãch ƒë·ªïi pin',
        data: {},
        error: errorInfo
      };
    }
  }

  // Delete a swap session
  async deleteSwap(swapId) {
    try {
      console.log('SwapService: Delete swap', swapId);

      const response = await apiUtils.delete(`/api/batteries/swap/${swapId}`);

      if (response.success) {
        return {
          success: true,
          message: 'X√≥a giao d·ªãch ƒë·ªïi pin th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ x√≥a giao d·ªãch ƒë·ªïi pin');
      }
    } catch (error) {
      console.error('Delete swap error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi x√≥a giao d·ªãch ƒë·ªïi pin',
        error: errorInfo
      };
    }
  }

}

export default new SwapService();