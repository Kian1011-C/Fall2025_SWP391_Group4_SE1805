// Driver/Support/utils/supportHelpers.js
// Pure helper functions for support management

/**
 * Get FAQ items
 */
export const getFAQItems = () => [
  {
    question: 'L√†m sao ƒë·ªÉ ƒë·ªïi pin?',
    answer: 'V√†o m·ª•c "ƒê·ªïi pin" tr√™n menu, ch·ªçn tr·∫°m g·∫ßn b·∫°n v√† l√†m theo h∆∞·ªõng d·∫´n.'
  },
  {
    question: 'T√¥i c√≥ th·ªÉ h·ªßy g√≥i d·ªãch v·ª• kh√¥ng?',
    answer: 'C√≥, b·∫°n c√≥ th·ªÉ h·ªßy g√≥i b·∫•t k·ª≥ l√∫c n√†o trong ph·∫ßn "G√≥i d·ªãch v·ª•".'
  },
  {
    question: 'Th·ªùi gian ƒë·ªïi pin m·∫•t bao l√¢u?',
    answer: 'Qu√° tr√¨nh ƒë·ªïi pin th∆∞·ªùng m·∫•t t·ª´ 3-5 ph√∫t.'
  },
  {
    question: 'L√†m sao ƒë·ªÉ li√™n h·ªá h·ªó tr·ª£ kh·∫©n c·∫•p?',
    answer: 'G·ªçi hotline 1900-xxxx ho·∫∑c d√πng n√∫t "H·ªó tr·ª£ kh·∫©n c·∫•p" trong app.'
  }
];

/**
 * Get issue types
 */
export const getIssueTypes = () => [
  { 
    icon: 'üîã', 
    title: 'L·ªói pin', 
    desc: 'Pin kh√¥ng ho·∫°t ƒë·ªông ƒë√∫ng', 
    color: '#19c37d',
    type: 'battery'
  },
  { 
    icon: 'üè™', 
    title: 'L·ªói tr·∫°m', 
    desc: 'Tr·∫°m ƒë·ªïi pin c√≥ v·∫•n ƒë·ªÅ', 
    color: '#6ab7ff',
    type: 'station'
  },
  { 
    icon: 'üí≥', 
    title: 'L·ªói thanh to√°n', 
    desc: 'V·∫•n ƒë·ªÅ v·ªõi thanh to√°n', 
    color: '#ffa500',
    type: 'payment'
  },
  { 
    icon: 'üì±', 
    title: 'L·ªói ·ª©ng d·ª•ng', 
    desc: 'App kh√¥ng ho·∫°t ƒë·ªông', 
    color: '#9c88ff',
    type: 'app'
  }
];

/**
 * Get contact info
 */
export const getContactInfo = () => [
  {
    icon: 'üìû',
    label: 'Hotline',
    value: '1900-xxxx',
    color: '#19c37d',
    type: 'phone'
  },
  {
    icon: 'üìß',
    label: 'Email',
    value: 'support@evbattery.vn',
    color: '#6ab7ff',
    type: 'email'
  },
  {
    icon: '‚è∞',
    label: 'Gi·ªù l√†m vi·ªác',
    value: '24/7 - M·ªçi l√∫c',
    color: '#B0B0B0',
    type: 'hours'
  }
];

/**
 * Get tabs configuration
 */
export const getTabs = () => [
  { id: 'contact', label: 'üìû Li√™n h·ªá', icon: 'üìû' },
  { id: 'report', label: 'üêõ B√°o l·ªói', icon: 'üêõ' },
  { id: 'faq', label: '‚ùì FAQ', icon: '‚ùì' }
];

/**
 * Get priority options
 */
export const getPriorityOptions = () => [
  { value: 'low', label: 'Th·∫•p' },
  { value: 'normal', label: 'B√¨nh th∆∞·ªùng' },
  { value: 'high', label: 'Cao' },
  { value: 'urgent', label: 'Kh·∫©n c·∫•p' }
];

/**
 * Get priority color
 */
export const getPriorityColor = (priority) => {
  const colors = {
    low: '#B0B0B0',
    normal: '#6ab7ff',
    high: '#ffa500',
    urgent: '#ff6b6b'
  };
  return colors[priority] || '#B0B0B0';
};

/**
 * Get priority label
 */
export const getPriorityLabel = (priority) => {
  const labels = {
    low: 'Th·∫•p',
    normal: 'B√¨nh th∆∞·ªùng',
    high: 'Cao',
    urgent: 'Kh·∫©n c·∫•p'
  };
  return labels[priority] || priority;
};

/**
 * Validate support form
 */
export const validateSupportForm = (formData) => {
  const errors = {};

  if (!formData.subject || formData.subject.trim() === '') {
    errors.subject = 'Vui l√≤ng nh·∫≠p ch·ªß ƒë·ªÅ';
  } else if (formData.subject.length < 5) {
    errors.subject = 'Ch·ªß ƒë·ªÅ ph·∫£i c√≥ √≠t nh·∫•t 5 k√Ω t·ª±';
  }

  if (!formData.message || formData.message.trim() === '') {
    errors.message = 'Vui l√≤ng nh·∫≠p n·ªôi dung';
  } else if (formData.message.length < 10) {
    errors.message = 'N·ªôi dung ph·∫£i c√≥ √≠t nh·∫•t 10 k√Ω t·ª±';
  }

  if (!formData.priority) {
    errors.priority = 'Vui l√≤ng ch·ªçn m·ª©c ƒë·ªô ∆∞u ti√™n';
  }

  return {
    isValid: Object.keys(errors).length === 0,
    errors
  };
};

/**
 * Create support ticket request
 */
export const createSupportRequest = (formData, userId) => {
  return {
    userId: userId,
    subject: formData.subject.trim(),
    message: formData.message.trim(),
    priority: formData.priority,
    status: 'open',
    createdAt: new Date().toISOString()
  };
};

/**
 * Get initial form data
 */
export const getInitialFormData = () => ({
  subject: '',
  message: '',
  priority: 'normal'
});

/**
 * Format issue type for submission
 */
export const formatIssueReport = (issueType, userId) => {
  const issue = getIssueTypes().find(i => i.type === issueType);
  
  return {
    userId: userId,
    subject: issue?.title || 'B√°o c√°o v·∫•n ƒë·ªÅ',
    message: `B√°o c√°o ${issue?.title}: ${issue?.desc}`,
    priority: 'normal',
    type: issueType,
    status: 'open',
    createdAt: new Date().toISOString()
  };
};
