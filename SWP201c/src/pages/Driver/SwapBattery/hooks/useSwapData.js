// hooks/useSwapData.js
import { useState } from 'react';
import swapService from '/src/assets/js/services/swapService.js';
import stationService from '/src/assets/js/services/stationService.js'; // Import API c·ªßa tr·∫°m
// import vehicleService from '/src/assets/js/services/vehicleService.js'; // Import API c·ªßa xe - T·∫†M TH·ªúI COMMENT OUT
// !!! GI·∫¢ ƒê·ªäNH QUAN TR·ªåNG:
// B·∫°n c·∫ßn import AuthContext (ho·∫∑c UserContext) c·ªßa b·∫°n ·ªü ƒë√¢y
// import { AuthContext } from '/src/context/AuthContext';

export const useSwapData = (goToStep, STEPS) => {
    // const { user, currentVehicle, activeContract } = useContext(AuthContext); // <-- B·∫°n c·∫ßn d√≤ng n√†y

    // --- L·∫§Y D·ªÆ LI·ªÜU TH·∫¨T T·ª™ SESSIONSTORAGE ---
    const getRealData = () => {
        try {
            const userId = sessionStorage.getItem('userId') || sessionStorage.getItem('UserID') || 'driver001';
            const vehicleId = sessionStorage.getItem('vehicleId') || sessionStorage.getItem('vehicleID') || 1;
            const contractId = sessionStorage.getItem('contractId') || sessionStorage.getItem('contractID') || 1;
            
            // L·∫•y batteryId t·ª´ nhi·ªÅu ngu·ªìn (session keys ho·∫∑c parse t·ª´ selectedVehicle)
            let batteryId = sessionStorage.getItem('batteryId') || sessionStorage.getItem('oldBatteryId') || sessionStorage.getItem('old_battery_id');
            
            // N·∫øu ch∆∞a c√≥, th·ª≠ parse t·ª´ selectedVehicle JSON
            if (!batteryId || batteryId === 'null' || batteryId === 'undefined') {
                try {
                    const selectedVehicleStr = sessionStorage.getItem('selectedVehicle');
                    if (selectedVehicleStr) {
                        const selectedVehicle = JSON.parse(selectedVehicleStr);
                        batteryId = selectedVehicle?.batteryId || 
                                   selectedVehicle?.currentBatteryId || 
                                   selectedVehicle?.current_battery_id ||
                                   selectedVehicle?.battery?.id ||
                                   selectedVehicle?.battery?.batteryId;
                        
                        if (batteryId) {
                            console.log('‚úÖ L·∫•y batteryId t·ª´ selectedVehicle:', batteryId);
                            // L∆∞u l·∫°i v√†o session ƒë·ªÉ l·∫ßn sau d√πng
                            sessionStorage.setItem('old_battery_id', String(batteryId));
                        }
                    }
                } catch (parseErr) {
                    console.warn('‚ö†Ô∏è Kh√¥ng parse ƒë∆∞·ª£c selectedVehicle:', parseErr);
                }
            }
            
            console.log('üîç getRealData - sessionStorage values:');
            console.log('  - userId:', userId);
            console.log('  - vehicleId:', vehicleId);
            console.log('  - contractId:', contractId);
            console.log('  - batteryId (final):', batteryId);
            
            return {
                user: { userId: userId },
                currentVehicle: { 
                    vehicleId: parseInt(vehicleId) || 1, 
                    currentBatteryId: batteryId ? parseInt(batteryId) : null 
                },
                activeContract: { contractId: parseInt(contractId) || 1 }
            };
        } catch (error) {
            console.error('L·ªói khi l·∫•y d·ªØ li·ªáu t·ª´ sessionStorage:', error);
            return {
                user: { userId: 'driver001' },
                currentVehicle: { vehicleId: 1, currentBatteryId: null },
                activeContract: { contractId: 1 }
            };
        }
    };
    
    const { user, currentVehicle, activeContract } = getRealData();


    const [selectedStation, setSelectedStation] = useState(null);
    const [selectedCabinet, setSelectedCabinet] = useState(null); // (Cabinet/Tower)
    const [transaction, setTransaction] = useState(null); // L∆∞u { swapId, emptySlot, newBattery }
    const [summary, setSummary] = useState(null); // T√≥m t·∫Øt cu·ªëi c√πng
    const [isLoading, setIsLoading] = useState(false);
    const [error, setError] = useState(null);

    /**
     * API 1: B·∫Øt ƒë·∫ßu ƒë·ªïi pin
     */
    const initiateSwap = async (cabinet) => {
        setSelectedCabinet(cabinet);
        setIsLoading(true);
        setError(null);

        try {
            // == B∆Ø·ªöC 1: L·∫§Y ID TH·∫¨T (T·ª™ D·ªÆ LI·ªÜU GI·∫¢ L·∫¨P ·ªû TR√äN) ==
            if (!user || !currentVehicle || !activeContract) {
                throw new Error("Kh√¥ng t√¨m th·∫•y th√¥ng tin User, Xe, ho·∫∑c H·ª£p ƒë·ªìng.");
            }

            // L·∫•y ID pin c≈© th·∫≠t t·ª´ sessionStorage
            const realData = {
                userId: user.userId,
                vehicleId: currentVehicle.vehicleId,
                contractId: activeContract.contractId,
                oldBatteryId: currentVehicle.currentBatteryId, // L·∫•y t·ª´ sessionStorage
                stationId: selectedStation.id || selectedStation.stationId,
                towerId: cabinet.id || cabinet.cabinetId,
            };
            
            console.log('üîç realData for initiateSwap:', realData);
            console.log('üîç oldBatteryId value:', realData.oldBatteryId);
            console.log('üîç oldBatteryId type:', typeof realData.oldBatteryId);
            
            // Validation: ƒê·∫£m b·∫£o oldBatteryId kh√¥ng null
            if (!realData.oldBatteryId || realData.oldBatteryId === null || realData.oldBatteryId === 'null') {
                console.error('‚ùå oldBatteryId is missing or null:', realData.oldBatteryId);
                console.error('‚ùå sessionStorage batteryId:', sessionStorage.getItem('batteryId'));
                console.error('‚ùå sessionStorage oldBatteryId:', sessionStorage.getItem('oldBatteryId'));
                console.error('‚ùå sessionStorage old_battery_id:', sessionStorage.getItem('old_battery_id'));
                console.error('‚ùå sessionStorage selectedVehicle:', sessionStorage.getItem('selectedVehicle'));
                
                // Hi·ªÉn th·ªã th√¥ng b√°o chi ti·∫øt cho user
                const errorMsg = 'Kh√¥ng t√¨m th·∫•y th√¥ng tin pin c·ªßa xe.\n\n' +
                    'Vui l√≤ng:\n' +
                    '1. Quay l·∫°i trang Dashboard\n' +
                    '2. Ch·ªçn l·∫°i xe c·ªßa b·∫°n\n' +
                    '3. ƒê·∫£m b·∫£o xe ƒë√£ ƒë∆∞·ª£c g·∫Øn pin\n' +
                    '4. Th·ª≠ l·∫°i quy tr√¨nh ƒë·ªïi pin';
                
                throw new Error(errorMsg);
            }

            // == B∆Ø·ªöC 2: QU√âT T·∫§T C·∫¢ SLOT C·ª¶A TR·ª§ (ƒë·ªÉ: 1) l·∫•y pin m·ªõi; 2) t√¨m slot tr·ªëng)
            console.log("ƒêang qu√©t slots c·ªßa tr·ª• (cabinet/tower):", realData.towerId);
            // G·ªçi API GET /api/driver/slots?towerId=...
            const slotsResponse = await stationService.getSlotsByTower(realData.towerId);

            let newBatteryId = null;
            let newBatterySlot = null;
            let emptySlotNumber = null;

            const slotsArray = (slotsResponse && slotsResponse.success && Array.isArray(slotsResponse.data))
                ? slotsResponse.data
                : Array.isArray(slotsResponse) ? slotsResponse : [];

            // 2.1) T√¨m pin m·ªõi: ∆∞u ti√™n pin 'full', sau ƒë√≥ 'available'
            console.log('Slots nh·∫≠n ƒë∆∞·ª£c t·ª´ API:', slotsArray);
            for (const slot of slotsArray) {
                const status = (slot.status || '').toString().toLowerCase();
                if (status === 'full' || status === 'available') {
                    const derivedBatteryId = slot.batteryId || slot.battery_id || slot?.battery?.id;
                    const derivedSlotNumber = slot.slotNumber || slot.slot_number || slot.slot_id;
                    newBatteryId = derivedBatteryId ?? `BAT-SLOT-${derivedSlotNumber}`; // fallback n·∫øu API kh√¥ng cung c·∫•p batteryId
                    newBatterySlot = derivedSlotNumber;
                    console.log('Ch·ªçn pin t·ª´ slot:', { status, derivedBatteryId, derivedSlotNumber });
                    break;
                }
            }

            // 2.2) T√¨m slot tr·ªëng theo SQL: status = 'empty', ORDER BY slot_number ASC, TOP 1
            const emptySlotsSorted = slotsArray
                .filter(s => (s.status || '').toString().toLowerCase() === 'empty')
                .sort((a, b) => {
                    const aNum = a.slotNumber || a.slot_number || a.slot_id || 0;
                    const bNum = b.slotNumber || b.slot_number || b.slot_id || 0;
                    return aNum - bNum;
                });
            if (emptySlotsSorted.length > 0) {
                const bestEmpty = emptySlotsSorted[0];
                emptySlotNumber = bestEmpty.slotNumber || bestEmpty.slot_number || bestEmpty.slot_id;
            }

            // N·∫øu kh√¥ng t√¨m th·∫•y pin m·ªõi n√†o
            if (newBatteryId === null) {
                throw new Error("Tr·ª• n√†y ƒë√£ h·∫øt pin ƒë·∫ßy. Vui l√≤ng ch·ªçn tr·ª• kh√°c.");
            }
            console.log(`Pin m·ªõi (ID: ${newBatteryId}) t·∫°i slot ${newBatterySlot}`);
            console.log(`Empty slot ƒë∆∞·ª£c ch·ªçn (nh·ªè nh·∫•t theo s·ªë th·ª© t·ª±): ${emptySlotNumber}`);

            // == B∆Ø·ªöC 2.3: L∆ØU C√ÅC TR∆Ø·ªúNG B·∫ÆT BU·ªòC V√ÄO sessionStorage THEO Y√äU C·∫¶U ==
            try {
                sessionStorage.setItem('UserID', String(user.userId));
                sessionStorage.setItem('contractID', String(activeContract.contractId));
                sessionStorage.setItem('vehicleID', String(currentVehicle.vehicleId));
                sessionStorage.setItem('stationID', String(realData.stationId));
                sessionStorage.setItem('towerID', String(realData.towerId));
                sessionStorage.setItem('old_battery_id', String(realData.oldBatteryId));
                sessionStorage.setItem('new_battery_id', String(newBatteryId));
                // distance_used s·∫Ω ƒë∆∞·ª£c c·∫≠p nh·∫≠t khi ho√†n t·∫•t (odometerAfter - odometerBefore)
                if (!sessionStorage.getItem('distance_used')) {
                    sessionStorage.setItem('distance_used', '0');
                }
            } catch {
                // ignore sessionStorage errors
            }

            // == B∆Ø·ªöC 3: G·ªåI API T·∫†O SWAP (V·ªöI ƒê·∫¶Y ƒê·ª¶ DATA TH·∫¨T) ==
            // N·∫øu transaction ƒë√£ c√≥ swapId th√¨ kh√¥ng t·∫°o l·∫°i (b·∫£o to√†n 1 create duy nh·∫•t)
            if (transaction && transaction.swapId) {
                console.log('Swap ƒë√£ ƒë∆∞·ª£c t·∫°o tr∆∞·ªõc ƒë√≥, swapId=', transaction.swapId);
            } else {
                // G·ªçi h√†m trong swapService.js (h√†m n√†y g·ªçi POST /api/swaps)
                const response = await swapService.initiateSwap({
                    ...realData,
                    // ƒë·∫£m b·∫£o g·ª≠i numeric n·∫øu l√† numeric
                    newBatteryId: Number.isFinite(Number(newBatteryId)) ? parseInt(newBatteryId, 10) : newBatteryId,
                });

                // L∆∞u d·ªØ li·ªáu tr·∫£ v·ªÅ k√®m emptySlotNumber ƒë√£ t√≠nh theo SQL
                const tx = {
                    ...response,
                    emptySlot: response?.emptySlot ?? emptySlotNumber,
                    emptySlotNumber: response?.emptySlot ?? emptySlotNumber,
                    // ƒê·∫£m b·∫£o swapId ƒë∆∞·ª£c l∆∞u v·ªõi fallback logic
                    swapId: response?.swapId || response?.id || response?.swap_id || 'UNKNOWN'
                };
                console.log('Response t·ª´ swapService:', response);
                console.log('Transaction object (after create):', tx);

                // L∆∞u v√†o session ƒë·ªÉ Step 3 hi·ªÉn th·ªã
                try {
                    if (tx.emptySlotNumber != null) {
                        sessionStorage.setItem('emptySlotNumber', String(tx.emptySlotNumber));
                    }
                    // L∆∞u swapId ƒë·ªÉ confirm sau n√†y
                    if (tx.swapId && tx.swapId !== 'UNKNOWN') {
                        sessionStorage.setItem('swapId', String(tx.swapId));
                    }
                } catch (e) {
                    console.error('L·ªói khi l∆∞u swap info v√†o sessionStorage:', e);
                }

                setTransaction(tx);
            }
            
            // Chuy·ªÉn sang B∆∞·ªõc 3: Tr·∫£ pin c≈©
            goToStep(STEPS.PLACE_OLD_BATTERY);

        } catch (err) {
            // Hi·ªÉn th·ªã l·ªói ra m√†n h√¨nh
            const apiError = err.response?.data?.message || err.message;
            setError(apiError || "L·ªói khi b·∫Øt ƒë·∫ßu ƒë·ªïi pin");
            // Quay l·∫°i B∆∞·ªõc 2: Ch·ªçn tr·ª•
            goToStep(STEPS.SELECT_TOWER);
        }
        setIsLoading(false);
    };

    /**
     * API 2: X√°c nh·∫≠n ho√†n t·∫•t (backend t·ª± x·ª≠ l√Ω old/new battery)
     */
    const confirmSwap = async (swapId) => {
        setIsLoading(true);
        setError(null);
        try {
            console.log('üöÄ Calling confirmSwap API with swapId:', swapId);
            
            // G·ªçi h√†m trong swapService.js (POST /api/swaps/{swapId}/confirm)
            const response = await swapService.confirmSwap(swapId);
            
            console.log('‚úÖ confirmSwap response:', response);
            console.log('üîç response type:', typeof response);
            console.log('üîç response keys:', Object.keys(response || {}));
            console.log('üîç response data:', JSON.stringify(response, null, 2));
            
            // L∆∞u d·ªØ li·ªáu t√≥m t·∫Øt (swap ƒë√£ update)
            // response ƒë√£ l√† data t·ª´ swapService.confirmSwap
            setSummary(response);
            // Chuy·ªÉn sang B∆∞·ªõc 5: Th√†nh c√¥ng
            goToStep(STEPS.SUCCESS);
        } catch (err) {
            const apiError = err.response?.data?.message || err.message;
            setError(apiError || 'L·ªói khi x√°c nh·∫≠n ho√†n t·∫•t');
            // Quay l·∫°i B∆∞·ªõc 3: Tr·∫£ pin c≈©
            goToStep(STEPS.PLACE_OLD_BATTERY);
        }
        setIsLoading(false);
    };

    // H√†m ho√†n th√†nh ƒë·ªïi pin (g·ªçi t·ª´ TakeNewBattery)
    const completeSwap = async () => {
        setIsLoading(true);
        setError(null);
        try {
            // L·∫•y swapId t·ª´ transaction
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
            console.log('üîÑ HO√ÄN TH√ÄNH ƒê·ªîI PIN');
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');
            console.log('Transaction object:', transaction);
            console.log('transaction.swapId:', transaction?.swapId);
            
            // L·∫•y swapId t·ª´ transaction ho·∫∑c sessionStorage
            const swapId = transaction?.swapId || sessionStorage.getItem('swapId');
            if (!swapId || swapId === 'UNKNOWN') {
                throw new Error('Kh√¥ng t√¨m th·∫•y swapId trong transaction ho·∫∑c sessionStorage');
            }

            console.log('‚úÖ SwapId for confirm:', swapId);
            console.log('Backend s·∫Ω t·ª± ƒë·ªông x·ª≠ l√Ω old/new battery t·ª´ database');
            console.log('‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ');

            // G·ªçi API confirm - backend t·ª± x·ª≠ l√Ω t·∫•t c·∫£
            await confirmSwap(swapId);

            // ===== C·∫¨P NH·∫¨T TH√îNG TIN XE SAU KHI ƒê·ªîI PIN TH√ÄNH C√îNG =====
            // Backend ƒë√£ t·ª± ƒë·ªông c·∫≠p nh·∫≠t vehicle.current_battery_id
            // Frontend ch·ªâ c·∫≠p nh·∫≠t UI ƒë·ªÉ hi·ªÉn th·ªã m·ª©c pin m·ªõi (100%)
            
            const selectedVehicleStr = sessionStorage.getItem('selectedVehicle');
            const newBatteryLevelFromSession = sessionStorage.getItem('newBatteryLevel') || '100';
            
            if (selectedVehicleStr) {
                try {
                    const selectedVehicle = JSON.parse(selectedVehicleStr);
                    
                    // C·∫≠p nh·∫≠t batteryLevel ƒë·ªÉ hi·ªÉn th·ªã UI (backend ƒë√£ update batteryId)
                    const updatedVehicle = {
                        ...selectedVehicle,
                        batteryLevel: parseInt(newBatteryLevelFromSession),
                        health: parseInt(newBatteryLevelFromSession)
                    };
                    
                    // L∆∞u l·∫°i v√†o sessionStorage
                    sessionStorage.setItem('selectedVehicle', JSON.stringify(updatedVehicle));
                    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t m·ª©c pin xe trong sessionStorage:', updatedVehicle);
                    console.log('‚ÑπÔ∏è batteryId ƒë√£ ƒë∆∞·ª£c backend c·∫≠p nh·∫≠t t·ª± ƒë·ªông');
                } catch (parseErr) {
                    console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ parse selectedVehicle t·ª´ sessionStorage:', parseErr);
                }
            } else {
                console.warn('‚ö†Ô∏è Kh√¥ng t√¨m th·∫•y selectedVehicle trong sessionStorage');
            }
            // ===== H·∫æT PH·∫¶N C·∫¨P NH·∫¨T TH√îNG TIN XE =====

        } catch (err) {
            console.error('L·ªói khi ho√†n th√†nh ƒë·ªïi pin:', err);
            setError('L·ªói khi ho√†n th√†nh ƒë·ªïi pin');
        }
        setIsLoading(false);
    };

    // H√†m reset state khi ho√†n th√†nh ho·∫∑c h·ªßy
    const resetSwapData = () => {
        setSelectedStation(null);
        setSelectedCabinet(null);
        setTransaction(null);
        setSummary(null);
        setError(null);
    };

    // Tr·∫£ v·ªÅ state v√† c√°c h√†m cho "b·ªô n√£o" (index.jsx) s·ª≠ d·ª•ng
    return {
        selectedStation,
        selectedCabinet,
        transaction,
        summary,
        isLoading,
        error,
        setSelectedStation,
        initiateSwap,
        confirmSwap,
        completeSwap,
        resetSwapData,
        setError,
        // Cung c·∫•p ID pin c≈© th·∫≠t cho component PlaceOldBattery.jsx
        // D√≤ng n√†y s·∫Ω l·∫•y ƒë√∫ng s·ªë 20 t·ª´ 'currentVehicle' ƒë√£ s·ª≠a ·ªü tr√™n
        oldBatteryId: currentVehicle?.currentBatteryId,
    };
};