// src/pages/Driver/SwapBattery/components/PlaceOldBattery.jsx
import React, { useContext, useState, useEffect } from 'react'; // Add useEffect
import { SwapContext } from '../index';
import batteryService from '/src/assets/js/services/batteryService.js'; 

const PlaceOldBattery = () => {
    // 1. GET DATA FROM CONTEXT
    const { transaction, isLoading, goToStep, STEPS } = useContext(SwapContext);

    // 2. STATE FOR THE FORM
    const [code, setCode] = useState(''); // Real ID
    const [percent, setPercent] = useState(0); // Initialize percentage state
    const [isPercentGenerated, setIsPercentGenerated] = useState(false); // Flag to ensure random generation happens only once
    const [selectedVehicle, setSelectedVehicle] = useState(null); // Vehicle data

    // 3. LOAD VEHICLE DATA AND SET BATTERY CODE
    useEffect(() => {
        try {
            // KI·ªÇM TRA XEM C√ì BATTERY ID ƒê√É L∆ØU TR∆Ø·ªöC ƒê√ì KH√îNG
            const savedBatteryId = sessionStorage.getItem('oldBatteryId');
            if (savedBatteryId) {
                setCode(savedBatteryId);
                console.log('ƒê√£ load l·∫°i batteryId t·ª´ sessionStorage:', savedBatteryId);
                return; // Kh√¥ng c·∫ßn load t·ª´ vehicle n·ªØa
            }
            
            const vehicleStr = sessionStorage.getItem('selectedVehicle');
            console.log('Vehicle string from sessionStorage:', vehicleStr);
            
            if (vehicleStr) {
                const vehicle = JSON.parse(vehicleStr);
                
                // B·ªï sung th√¥ng tin pin n·∫øu ch∆∞a c√≥
                const enhancedVehicle = {
                    ...vehicle,
                    current_battery_id: vehicle.current_battery_id || vehicle.batteryId || vehicle.id || null,
                    batteryCode: vehicle.batteryCode || `BAT-${vehicle.batteryId || vehicle.id || '001'}`,
                    battery_code: vehicle.battery_code || `BAT-${vehicle.batteryId || vehicle.id || '001'}`,
                    batteryLevel: vehicle.batteryLevel || 85, // M·∫∑c ƒë·ªãnh 85%
                    battery_level: vehicle.battery_level || 85
                };
                
                setSelectedVehicle(enhancedVehicle);
                console.log('ƒê√£ load th√¥ng tin xe:', enhancedVehicle);
                console.log('batteryId t·ª´ sessionStorage:', vehicle.batteryId);
                console.log('current_battery_id:', enhancedVehicle.current_battery_id);
                console.log('batteryCode:', enhancedVehicle.batteryCode);
                console.log('battery_code:', enhancedVehicle.battery_code);
                
                // L·∫•y m√£ pin t·ª´ xe ƒë√£ ch·ªçn v·ªõi debug chi ti·∫øt
                let batteryCode = 'N/A';
                
                // ∆Øu ti√™n batteryId t·ª´ sessionStorage tr∆∞·ªõc
                if (vehicle.batteryId) {
                    batteryCode = String(vehicle.batteryId);
                    console.log('S·ª≠ d·ª•ng batteryId t·ª´ sessionStorage:', batteryCode);
                } else if (enhancedVehicle.current_battery_id) {
                    batteryCode = String(enhancedVehicle.current_battery_id);
                    console.log('S·ª≠ d·ª•ng current_battery_id:', batteryCode);
                } else if (enhancedVehicle.batteryCode) {
                    batteryCode = String(enhancedVehicle.batteryCode);
                    console.log('S·ª≠ d·ª•ng batteryCode:', batteryCode);
                } else if (enhancedVehicle.battery_code) {
                    batteryCode = String(enhancedVehicle.battery_code);
                    console.log('S·ª≠ d·ª•ng battery_code:', batteryCode);
                } else {
                    console.error('‚ùå Kh√¥ng t√¨m th·∫•y m√£ pin trong d·ªØ li·ªáu xe');
                    console.error('D·ªØ li·ªáu xe:', enhancedVehicle);
                    throw new Error('Kh√¥ng t√¨m th·∫•y m√£ pin c·ªßa xe. Vui l√≤ng ki·ªÉm tra d·ªØ li·ªáu API.');
                }
                
                setCode(batteryCode);
                console.log('M√£ pin cu·ªëi c√πng:', batteryCode);
                
                // L∆ØU BATTERY ID V√ÄO SESSION STORAGE
                try {
                    sessionStorage.setItem('oldBatteryId', batteryCode);
                    console.log('ƒê√£ l∆∞u batteryId v√†o sessionStorage:', batteryCode);
                } catch (error) {
                    console.error('L·ªói khi l∆∞u batteryId v√†o sessionStorage:', error);
                }
            } else {
                console.log('Kh√¥ng c√≥ d·ªØ li·ªáu xe trong sessionStorage');
                setCode('N/A');
            }
        } catch (error) {
            console.error('L·ªói khi load th√¥ng tin xe:', error);
            setCode('N/A');
        }
    }, []);

    // 4. L·∫§Y DUNG L∆Ø·ª¢NG PIN C≈® TH·∫¨T T·ª™ API
    useEffect(() => {
        const fetchOldBatteryLevel = async () => {
            if (!isPercentGenerated && code && code !== 'N/A') {
                try {
                    console.log('üîã L·∫•y th√¥ng tin pin c≈© t·ª´ API cho batteryId:', code);
                    console.log('üîç API endpoint s·∫Ω g·ªçi: GET /api/batteries/' + code);
                    
                    // L·∫•y th√¥ng tin pin c≈© t·ª´ API
                    const batteryResponse = await batteryService.getBatteryById(code);
                    
                    console.log('üîç API response cho pin c≈©:', batteryResponse);
                    console.log('üîç batteryResponse.success:', batteryResponse.success);
                    console.log('üîç batteryResponse.data:', batteryResponse.data);
                    
                    if (batteryResponse.success && batteryResponse.data) {
                        const batteryData = batteryResponse.data;
                        console.log('üîç batteryData chi ti·∫øt:', batteryData);
                        
                        const batteryLevel = batteryData.stateOfHealth || batteryData.state_of_health || 
                                          batteryData.batteryLevel || batteryData.battery_level || 0;
                        
                        console.log('‚úÖ Dung l∆∞·ª£ng pin c≈© t·ª´ API:', batteryLevel);
                        console.log('üîç C√°c tr∆∞·ªùng c√≥ s·∫µn:', {
                            stateOfHealth: batteryData.stateOfHealth,
                            state_of_health: batteryData.state_of_health,
                            batteryLevel: batteryData.batteryLevel,
                            battery_level: batteryData.battery_level
                        });
                        
                        // Ki·ªÉm tra pin c≈© ph·∫£i th·∫•p h∆°n 30%
                        if (batteryLevel >= 30) {
                            console.warn('‚ö†Ô∏è Pin c≈© c√≥ dung l∆∞·ª£ng cao h∆°n 30%:', batteryLevel);
                            alert(`Pin c≈© c√≥ dung l∆∞·ª£ng ${batteryLevel}% cao h∆°n 30%. Vui l√≤ng ki·ªÉm tra l·∫°i.`);
                            setPercent(batteryLevel);
                        } else {
                            console.log('‚úÖ Pin c≈© h·ª£p l·ªá (dung l∆∞·ª£ng < 30%):', batteryLevel);
                            setPercent(batteryLevel);
                        }
                    } else {
                        console.warn('‚ö†Ô∏è Kh√¥ng l·∫•y ƒë∆∞·ª£c th√¥ng tin pin c≈© t·ª´ API');
                        console.log('üîç Ki·ªÉm tra d·ªØ li·ªáu t·ª´ xe ƒë√£ ch·ªçn...');
                        console.log('üîç selectedVehicle:', selectedVehicle);
                        
                        // S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ xe ƒë√£ ch·ªçn
                        const vehicleBatteryLevel = selectedVehicle?.batteryLevel || selectedVehicle?.battery_level || 0;
                        console.log('üîç vehicleBatteryLevel t·ª´ xe:', vehicleBatteryLevel);
                        
                        if (vehicleBatteryLevel > 0) {
                            console.log('‚ö†Ô∏è C·∫¢NH B√ÅO: S·ª≠ d·ª•ng d·ªØ li·ªáu t·ª´ xe c√≥ th·ªÉ kh√¥ng ch√≠nh x√°c!');
                            console.log('‚ö†Ô∏è D·ªØ li·ªáu t·ª´ xe c√≥ th·ªÉ l√† pin m·ªõi, kh√¥ng ph·∫£i pin c≈©!');
                            console.log('‚ö†Ô∏è vehicleBatteryLevel t·ª´ xe:', vehicleBatteryLevel);
                            
                            // Ki·ªÉm tra n·∫øu d·ªØ li·ªáu t·ª´ xe c√≥ v·∫ª kh√¥ng h·ª£p l√Ω cho pin c≈©
                            if (vehicleBatteryLevel > 80) {
                                console.log('‚ùå D·ªØ li·ªáu t·ª´ xe qu√° cao cho pin c≈©, s·ª≠ d·ª•ng random th·∫•p h∆°n');
                                const randomPercent = Math.floor(Math.random() * 25) + 5; // 5-29%
                                setPercent(randomPercent);
                                console.log('‚úÖ S·ª≠ d·ª•ng random percentage cho pin c≈©:', randomPercent);
                            } else {
                                setPercent(vehicleBatteryLevel);
                                console.log('‚úÖ S·ª≠ d·ª•ng dung l∆∞·ª£ng pin t·ª´ xe:', vehicleBatteryLevel);
                            }
                        } else {
                            console.log('‚ö†Ô∏è Kh√¥ng c√≥ d·ªØ li·ªáu t·ª´ xe, s·ª≠ d·ª•ng random');
                            // Fallback: Random percentage th·∫•p h∆°n 30%
                            const randomPercent = Math.floor(Math.random() * 25) + 5; // 5-29%
                            setPercent(randomPercent);
                        }
                    }
                } catch (error) {
                    console.error('‚ùå L·ªói khi l·∫•y th√¥ng tin pin c≈©:', error);
                    // Fallback: Random percentage th·∫•p h∆°n 30%
                    const randomPercent = Math.floor(Math.random() * 25) + 5; // 5-29%
                    setPercent(randomPercent);
                    console.log(`Fallback random percentage: ${randomPercent}%`);
                }
                
                setIsPercentGenerated(true);
            }
        };
        
        fetchOldBatteryLevel();
    }, [code, isPercentGenerated, selectedVehicle]);

    // 4. HANDLE SUBMIT
    const handleSubmit = async (e) => {
        e.preventDefault();
        
        try {
            // L∆∞u th√¥ng tin pin c≈© v√†o sessionStorage
            sessionStorage.setItem('oldBatteryLevel', String(percent));
            console.log('‚úÖ ƒê√£ l∆∞u dung l∆∞·ª£ng pin c≈©:', percent);
            
            // C·∫≠p nh·∫≠t th√¥ng tin pin c≈© v√†o database
            if (code && code !== 'N/A') {
                console.log('üîÑ C·∫≠p nh·∫≠t th√¥ng tin pin c≈© v√†o database...');
                const updateResult = await batteryService.updateBattery(code, {
                    stateOfHealth: percent,
                    batteryLevel: percent,
                    status: 'RETURNED', // ƒê√°nh d·∫•u pin ƒë√£ ƒë∆∞·ª£c tr·∫£
                    lastUsed: new Date().toISOString()
                });
                
                if (updateResult.success) {
                    console.log('‚úÖ ƒê√£ c·∫≠p nh·∫≠t pin c≈© v√†o database:', updateResult.data);
                } else {
                    console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t pin c≈© v√†o database:', updateResult.message);
                }
            }
            
            // Chuy·ªÉn b∆∞·ªõc
            goToStep(STEPS.TAKE_NEW_BATTERY);
            console.log('ƒê√£ ƒë·∫∑t pin c≈©, chuy·ªÉn sang b∆∞·ªõc l·∫•y pin m·ªõi.');
            
        } catch (error) {
            console.error('‚ùå L·ªói khi x·ª≠ l√Ω pin c≈©:', error);
            alert('C√≥ l·ªói x·∫£y ra khi x·ª≠ l√Ω pin c≈©. Vui l√≤ng th·ª≠ l·∫°i.');
        }
    };

    // Get the empty slot number
    const emptySlotNumber = transaction?.emptySlot || '...';

    return (
        <div className="station-selector-container">
            <h2 className="station-selector-title">3. Tr·∫£ pin c≈©</h2>

            <div className="place-battery-card">
                <p className="place-battery-label">M·ªùi b·∫°n ƒë·∫∑t pin c≈© v√†o h·ªôc s·ªë:</p>
                <h1 className="place-battery-slot-number">{emptySlotNumber}</h1>

                {/* Simulation Form */}
                <form onSubmit={handleSubmit} className="simulation-form">
                    <p className="simulation-label">Th√¥ng tin pin c≈© (M√¥ ph·ªèng):</p>
                     <div className="form-group">
                         <label htmlFor="batCode">M√£/ID pin c≈©:</label>
                         <input
                             type="text"
                             id="batCode"
                             value={code} // Display real ID
                             readOnly // Make ID read-only
                             className="readonly-input" // Add a class for styling
                         />
                         {selectedVehicle && (
                             <small style={{ color: '#9ca3af', fontSize: '12px' }}>
                                 T·ª´ xe {selectedVehicle.plateNumber || selectedVehicle.model}
                             </small>
                         )}
                     </div>
                    <div className="form-group">
                        <label htmlFor="batPercent">% pin c≈© (ƒê√£ qu√©t - Random):</label>
                        <input
                            type="number"
                            id="batPercent"
                            value={percent} // Display random percentage
                            readOnly // Make percentage read-only
                            className="readonly-input" // Add a class for styling
                        />
                    </div>

                    <button
                        type="submit"
                        className="place-battery-button"
                        disabled={isLoading}
                    >
                        {isLoading ? "ƒêang x√°c nh·∫≠n..." : "T√¥i ƒë√£ ƒë·∫∑t pin"}
                    </button>
                </form>
            </div>
        </div>
    );
};

export default PlaceOldBattery;