// src/pages/Driver/SwapBattery/components/TowerSelector.jsx
import React, { useContext, useState, useEffect } from 'react';
import { SwapContext } from '../index'; 
import stationService from '/src/assets/js/services/stationService.js'; 

const TowerSelector = () => {
    const { selectedStation, initiateSwap, isLoading, goToStep, STEPS } = useContext(SwapContext);
    
    const [cabinets, setCabinets] = useState([]); 
    const [selectedCabinet, setSelectedCabinet] = useState(null);
    const [loading, setLoading] = useState(true); 
    const [error, setError] = useState(null);
    const [towerSlotInfo, setTowerSlotInfo] = useState({}); // L∆∞u th√¥ng tin slot v√† pin c·ªßa t·ª´ng tr·ª•

    // LOAD L·∫†I TR·ª§ ƒê√É CH·ªåN T·ª™ SESSION STORAGE
    useEffect(() => {
        try {
            const savedCabinet = sessionStorage.getItem('selectedCabinet');
            if (savedCabinet) {
                const cabinet = JSON.parse(savedCabinet);
                setSelectedCabinet(cabinet);
                console.log('ƒê√£ load l·∫°i tr·ª• t·ª´ sessionStorage:', cabinet);
            }
        } catch (error) {
            console.error('L·ªói khi load tr·ª• t·ª´ sessionStorage:', error);
        }
    }, []);

    useEffect(() => {
        if (!selectedStation) {
            goToStep(STEPS.SELECT_STATION);
            return;
        }

        const fetchCabinets = async () => {
            setLoading(true);
            setError(null);
            try {
                // G·ªçi API th·∫≠t: GET /api/driver/towers?stationId=...
                // (stationService ƒë√£ ƒë∆∞·ª£c s·ª≠a ƒë·ªÉ g·ªçi API n√†y)
                const data = await stationService.getCabinetsByStation(selectedStation.id || selectedStation.stationId);
                
                // data tr·∫£ v·ªÅ l√† m·ªôt m·∫£ng ƒë√£ ƒë∆∞·ª£c service x·ª≠ l√Ω
                if (Array.isArray(data)) {
                    setCabinets(data); 
                    
                    // L·∫•y th√¥ng tin slot v√† pin cho t·ª´ng tr·ª•
                    const slotInfoMap = {};
                    for (const cabinet of data) {
                        const towerId = cabinet.id || cabinet.cabinetId;
                        if (towerId) {
                            try {
                                console.log('üîã L·∫•y th√¥ng tin slot v√† pin cho tr·ª•:', towerId);
                                const slotsResponse = await stationService.getSlotsByTower(towerId);
                                if (slotsResponse.success && Array.isArray(slotsResponse.data)) {
                                    const slots = slotsResponse.data;
                                    const availableBatteries = slots.filter(slot => 
                                        slot.batteryId && 
                                        slot.status && 
                                        slot.status.toLowerCase() !== 'charging' && 
                                        slot.status.toLowerCase() !== 'maintenance' &&
                                        slot.status.toLowerCase() !== 'empty'
                                    ).length;
                                    const emptySlots = slots.filter(slot => 
                                        !slot.batteryId || 
                                        slot.status?.toLowerCase() === 'empty'
                                    ).length;
                                    
                                    slotInfoMap[towerId] = {
                                        availableBatteries,
                                        emptySlots,
                                        totalSlots: slots.length
                                    };
                                    console.log('‚úÖ Th√¥ng tin tr·ª•', towerId, ':', slotInfoMap[towerId]);
                                }
                            } catch (err) {
                                console.warn('‚ö†Ô∏è Kh√¥ng th·ªÉ l·∫•y th√¥ng tin slot cho tr·ª•', towerId, ':', err);
                                slotInfoMap[towerId] = {
                                    availableBatteries: 0,
                                    emptySlots: 0,
                                    totalSlots: 0
                                };
                            }
                        }
                    }
                    setTowerSlotInfo(slotInfoMap);
                } else {
                    console.warn("D·ªØ li·ªáu tr·ª• kh√¥ng ph·∫£i l√† m·∫£ng:", data);
                    setCabinets([]);
                }
            } catch (err) {
                console.error("L·ªói khi t·∫£i danh s√°ch tr·ª•:", err);
                setError(err.message || "Kh√¥ng th·ªÉ t·∫£i danh s√°ch tr·ª•.");
            } finally {
                setLoading(false);
            }
        };

        fetchCabinets();
    }, [selectedStation, goToStep, STEPS]); 

    const handleStartSwap = () => {
        if (selectedCabinet) {
            // L∆ØU TR·ª§ V√ÄO SESSION STORAGE
            try {
                sessionStorage.setItem('selectedCabinet', JSON.stringify(selectedCabinet));
                console.log('ƒê√£ l∆∞u tr·ª• v√†o sessionStorage:', selectedCabinet);
            } catch (error) {
                console.error('L·ªói khi l∆∞u tr·ª• v√†o sessionStorage:', error);
            }
            
            initiateSwap(selectedCabinet);
        }
    };

    if (loading) {
        return <div style={{ color: 'white', textAlign: 'center', padding: '40px' }}>ƒêang t·∫£i danh s√°ch tr·ª•...</div>;
    }

    if (error) {
        return <div style={{ color: 'red', textAlign: 'center', padding: '40px' }}>
            L·ªói: {error}
        </div>;
    }

    return (
        <div className="station-selector-container"> 
            <h2 className="station-selector-title">2. Ch·ªçn tr·ª• t·∫°i tr·∫°m {selectedStation?.name}</h2>
            
            <div className="station-grid"> 
                {cabinets.length > 0 ? (
                    cabinets.map(cab => (
                        <CabinetCard 
                            key={cab.id || cab.cabinetId}
                            cabinet={cab}
                            isSelected={selectedCabinet?.id === cab.id}
                            onSelect={() => setSelectedCabinet(cab)}
                            slotInfo={towerSlotInfo[cab.id || cab.cabinetId]}
                        />
                    ))
                ) : (
                    <p style={{ color: 'gray' }}>Tr·∫°m n√†y hi·ªán kh√¥ng c√≥ tr·ª• n√†o s·∫µn s√†ng.</p>
                )}
            </div>

            {cabinets.length > 0 && (
                <div style={{ marginTop: '24px', textAlign: 'center' }}>
                    <button 
                        className="start-swap-button" 
                        onClick={handleStartSwap} 
                        disabled={!selectedCabinet || isLoading}
                    >
                        {isLoading ? "ƒêang x·ª≠ l√Ω..." : "B·∫Øt ƒë·∫ßu ƒë·ªïi pin"}
                    </button>
                </div>
            )}
        </div>
    );
};

// Component con (CabinetCard)
const CabinetCard = ({ cabinet, isSelected, onSelect, slotInfo }) => {
    
    // ==========================================================
    // S·ª¨A L·ªñI "B·∫¢O TR√å":
    // Logic c≈©: cabinet.status !== 'Ho·∫°t ƒë·ªông' (SAI)
    // Logic m·ªõi: Ki·ªÉm tra xem status c√≥ ph·∫£i l√† "active" kh√¥ng
    // (ƒê√¢y l√† status m√† DriverController.java tr·∫£ v·ªÅ)
    // ==========================================================
    const isMaintenance = (cabinet.status !== 'active'); 
    
    let cardClass = `station-card ${isMaintenance ? 'maintenance' : ''}`;
    if (isSelected && !isMaintenance) { // Ch·ªâ 'selected' khi kh√¥ng b·∫£o tr√¨
        cardClass += ' selected'; 
    }
    
    return (
        // Ch·ªâ cho ph√©p click (onSelect) khi kh√¥ng b·∫£o tr√¨
        <div className={cardClass} onClick={isMaintenance ? null : onSelect}>
            <div className="station-card-header">
                <h3 className="station-name">{cabinet.name}</h3>
                <span className={`station-status ${isMaintenance ? 'maintenance' : 'active'}`}>
                    {isMaintenance ? 'B·∫£o tr√¨' : 'Ho·∫°t ƒë·ªông'}
                </span>
            </div>
            <div className="station-address">
                {slotInfo ? (
                    <div style={{ display: 'flex', flexDirection: 'column', gap: '4px' }}>
                        <span>S·ªë Pin ƒëang s·∫µn c√≥: {slotInfo.availableBatteries}</span>
                        <span>S·ªë slot tr·ªëng: {slotInfo.emptySlots}</span>
                    </div>
                ) : (
                    <span>S·ªë h·ªôc tr·ªëng: {cabinet.availableSlots || 0} / {cabinet.totalSlots || 0}</span>
                )}
            </div>
        </div>
    );
};

export default TowerSelector;