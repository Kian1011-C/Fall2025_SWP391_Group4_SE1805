// src/assets/js/services/stationService.js

// (ƒê·∫£m b·∫£o ƒë∆∞·ªùng d·∫´n n√†y ƒë√∫ng, c√≥ th·ªÉ l√† ../../config/api.js)
import { apiUtils, API_CONFIG } from '../config/api.js';
const { ENDPOINTS } = API_CONFIG;

const stationService = {
    /**
     * API 1 (Driver - B∆∞·ªõc 1): L·∫•y t·∫•t c·∫£ c√°c tr·∫°m
     * (H√†m n√†y ƒë√£ c√≥)
     */
    getAllStations: async (filters = {}) => { // <-- 1. Ch·∫•p nh·∫≠n 'filters'
        try {
            console.log("StationService: ƒêang l·∫•y t·∫•t c·∫£ tr·∫°m...", filters);
            // 2. Truy·ªÅn 'filters' v√†o l√†m query params
            const response = await apiUtils.get(ENDPOINTS.STATIONS.BASE, filters); 
            return response;
        } catch (error) {
            console.error('L·ªói khi l·∫•y danh s√°ch tr·∫°m:', error);
            throw error; 
        }
    },

    /**
     * API 2 (Driver - B∆∞·ªõc 2): L·∫•y c√°c tr·ª• c·ªßa 1 tr·∫°m
     * (H√†m n√†y ƒë√£ c√≥)
     */
    getCabinetsByStation: async (stationId) => {
        try {
            console.log(`StationService: L·∫•y tr·ª• c·ªßa tr·∫°m ${stationId}...`);
            
            const endpoint = ENDPOINTS.DRIVER.GET_TOWERS_BY_STATION;
            const params = { stationId: stationId };
            
            console.log("ƒêang g·ªçi URL:", endpoint, "v·ªõi params:", params);
            
            const response = await apiUtils.get(endpoint, params);
            
            if (response && response.success && Array.isArray(response.data)) {
                // ƒê·ªïi t√™n ƒë·ªÉ Component (FE) hi·ªÉu ƒë∆∞·ª£c
                const adaptedData = response.data.map(tower => ({
                    ...tower,
                    id: tower.id, 
                    cabinetId: tower.id, 
                    name: `Tr·ª• ${tower.towerNumber}`, 
                }));
                return adaptedData;
            }
            return []; 
        } catch (error) {
            console.error(`L·ªói khi l·∫•y tr·ª• c·ªßa tr·∫°m ${stationId}:`, error);
            throw error;
        }
    },
    
    // ==========================================================
    // S·ª¨A L·ªñI: TH√äM H√ÄM B·ªä THI·∫æU
    // (H√†m n√†y ƒë∆∞·ª£c g·ªçi b·ªüi useSwapData.js ƒë·ªÉ t√¨m pin m·ªõi)
    // ==========================================================
    /**
     * API 3 (Driver - B∆∞·ªõc 3): L·∫•y T·∫§T C·∫¢ c√°c h·ªôc (slots) c·ªßa 1 tr·ª•
     * G·ªçi: GET /api/driver/slots?towerId=...
     */
    getSlotsByTower: async (towerId) => {
        try {
            console.log(`StationService: L·∫•y h·ªôc c·ªßa tr·ª• ${towerId}...`);
            
            const endpoint = ENDPOINTS.DRIVER.GET_SLOTS_BY_TOWER;
            const params = { towerId: towerId };
            
            console.log("ƒêang g·ªçi URL:", endpoint, "v·ªõi params:", params);
            
            // BE tr·∫£ v·ªÅ { success: true, data: [...] }
            const response = await apiUtils.get(endpoint, params);
            
            console.log('üîç getSlotsByTower response:', response);
            console.log('üîç response.success:', response?.success);
            console.log('üîç response.data:', response?.data);
            console.log('üîç response.data length:', response?.data?.length);
            
            // Tr·∫£ v·ªÅ to√†n b·ªô response ƒë·ªÉ useSwapData x·ª≠ l√Ω (check success, data)
            return response;
            
        } catch (error) {
            console.error(`L·ªói khi l·∫•y h·ªôc c·ªßa tr·ª• ${towerId}:`, error);
            throw error;
        }
    },
    
    // ==========================================================
    // === CODE M·ªöI TH√äM CHO TRANG STAFF (B·∫ÆT ƒê·∫¶U T·ª™ ƒê√ÇY) ===
    // ==========================================================

    /**
     * API 4 (Staff): L·∫•y c√°c Tr·ª• (Cabinets) c·ªßa 1 Tr·∫°m
     * ƒê∆∞·ª£c g·ªçi b·ªüi hook: useStationDetailsData.js
     * G·ªçi: GET /api/staff/stations/{stationId}/cabinets
     */
    getStaffCabinetsByStation: async (stationId) => {
        try {
            console.log(`StationService (STAFF): L·∫•y tr·ª• c·ªßa tr·∫°m ${stationId}...`);
            
            // Do endpoint n√†y kh√¥ng c√≥ trong 'ENDPOINTS' c·ªßa Driver,
            // ch√∫ng ta t·∫°m th·ªùi hardcode.
            // B·∫°n n√™n th√™m n√≥ v√†o file API_CONFIG sau.
            const endpoint = `/api/staff/stations/${stationId}/cabinets`; 
            
            const response = await apiUtils.get(endpoint);
            
            // Tr·∫£ v·ªÅ to√†n b·ªô response ƒë·ªÉ useStationDetailsData x·ª≠ l√Ω
            // (response n√™n c√≥ d·∫°ng { success: true, data: [...], stationName: "..." })
            return response; 
            
        } catch (error) {
            console.error(`L·ªói khi l·∫•y tr·ª• (Staff) c·ªßa tr·∫°m ${stationId}:`, error);
            throw error; // N√©m l·ªói ƒë·ªÉ hook (useStationDetailsData) b·∫Øt
        }
    },
    
    /**
     * API 5 (Staff): L·∫•y c√°c H·ªôc (Slots) c·ªßa 1 Tr·ª•
     * ƒê∆∞·ª£c g·ªçi b·ªüi hook: useCabinetDetailsData.js
     * G·ªçi: GET /api/staff/cabinets/{cabinetId}/slots
     */
    getStaffSlotsByCabinet: async (cabinetId) => {
        try {
            console.log(`StationService (STAFF): L·∫•y h·ªôc c·ªßa tr·ª• ${cabinetId}...`);
            
            // T∆∞∆°ng t·ª±, endpoint n√†y l√† c·ªßa Staff, n√™n t·∫°m hardcode
            const endpoint = `/api/staff/cabinets/${cabinetId}/slots`;
            
            const response = await apiUtils.get(endpoint);
            
            // Tr·∫£ v·ªÅ to√†n b·ªô response ƒë·ªÉ useCabinetDetailsData x·ª≠ l√Ω
            // (response n√™n c√≥ d·∫°ng { success: true, data: [...], cabinetName: "..." })
            return response;
            
        } catch (error) {
            console.error(`L·ªói khi l·∫•y h·ªôc (Staff) c·ªßa tr·ª• ${cabinetId}:`, error);
            throw error; // N√©m l·ªói ƒë·ªÉ hook (useCabinetDetailsData) b·∫Øt
        }
    },

    /**
     * API 6: L·∫•y danh s√°ch c√°c th√°p pin c√≥ s·∫µn t·∫°i m·ªôt tr·∫°m c·ª• th·ªÉ
     * G·ªçi: GET /api/stations/{id}/towers
     */
    getTowersByStationId: async (stationId) => {
        try {
            console.log(`StationService: L·∫•y towers c·ªßa tr·∫°m ${stationId}...`);
            
            const endpoint = `/api/stations/${stationId}/towers`;
            
            const response = await apiUtils.get(endpoint);
            
            // Tr·∫£ v·ªÅ to√†n b·ªô response
            return response;
            
        } catch (error) {
            console.error(`L·ªói khi l·∫•y towers c·ªßa tr·∫°m ${stationId}:`, error);
            throw error;
        }
        
    },
    // ==========================================================
    // === CODE M·ªöI TH√äM CHO TRANG ADMIN (B·∫ÆT ƒê·∫¶U T·ª™ ƒê√ÇY) ===
    // ==========================================================
    /**
     * API 7 (Admin): T·∫°o m·ªôt tr·∫°m m·ªõi
     * @param {object} stationData - D·ªØ li·ªáu c·ªßa tr·∫°m m·ªõi
     */
    createStation: async (stationData) => {
        try {
            console.log('StationService (Admin): T·∫°o tr·∫°m m·ªõi', stationData);
            const response = await apiUtils.post(ENDPOINTS.STATIONS.BASE, stationData);
            
            if (response.success) {
                return { success: true, data: response.data, message: 'T·∫°o tr·∫°m th√†nh c√¥ng' };
            } else {
                throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫°o tr·∫°m');
            }
        } catch (error) {
            console.error('L·ªói khi t·∫°o tr·∫°m (Admin):', error);
            const errorInfo = apiUtils.handleError(error);
            return { success: false, message: errorInfo.message || 'L·ªói API' };
        }
    },

    /**
     * API 8 (Admin): C·∫≠p nh·∫≠t th√¥ng tin m·ªôt tr·∫°m
     * @param {number} stationId - ID c·ªßa tr·∫°m c·∫ßn c·∫≠p nh·∫≠t
     * @param {object} stationData - D·ªØ li·ªáu c·∫≠p nh·∫≠t
     */
    updateStation: async (stationId, stationData) => {
        try {
            console.log(`StationService (Admin): C·∫≠p nh·∫≠t tr·∫°m ${stationId}`, stationData);
            const response = await apiUtils.put(ENDPOINTS.STATIONS.BY_ID(stationId), stationData);
            
            if (response.success) {
                return { success: true, data: response.data, message: 'C·∫≠p nh·∫≠t tr·∫°m th√†nh c√¥ng' };
            } else {
                throw new Error(response.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t tr·∫°m');
            }
        } catch (error) {
            console.error(`L·ªói khi c·∫≠p nh·∫≠t tr·∫°m ${stationId} (Admin):`, error);
            const errorInfo = apiUtils.handleError(error);
            return { success: false, message: errorInfo.message || 'L·ªói API' };
        }
    },
};

// ƒê·∫£m b·∫£o b·∫°n d√πng 'export default'
export default stationService;