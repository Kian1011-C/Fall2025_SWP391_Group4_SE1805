import { apiUtils, API_CONFIG } from '../config/api.js';

class UserService {
  /**
   * L·∫•y danh s√°ch t·∫•t c·∫£ ng∆∞·ªùi d√πng (Admin) b·∫±ng c√°ch g·ªôp Drivers v√† Staff.
   */
  async getAllUsers(filters = {}) {
    try {
      console.log('UserService: L·∫•y t·∫•t c·∫£ ng∆∞·ªùi d√πng t·ª´ /api/admin/users...', filters);
      
      // G·ªçi M·ªòT API duy nh·∫•t m√† backend c√≥
      // filters (v√≠ d·ª•: { role: 'driver', search: 'abc' }) 
      // s·∫Ω ƒë∆∞·ª£c apiUtils t·ª± ƒë·ªông chuy·ªÉn th√†nh query params:
      // /api/admin/users?role=driver&search=abc
      const response = await apiUtils.get('/api/admin/users', filters);
      
      if (response.success && Array.isArray(response.data)) {
        // D·ªØ li·ªáu tr·∫£ v·ªÅ t·ª´ backend ƒë√£ l√† m·ªôt m·∫£ng user ho√†n ch·ªânh
        return { 
          success: true, 
          data: response.data, 
          message: 'L·∫•y danh s√°ch ng∆∞·ªùi d√πng th√†nh c√¥ng',
          // Ch√∫ng ta c≈©ng n√™n tr·∫£ v·ªÅ th√¥ng tin ph√¢n trang
          total: response.total,
          page: response.page,
          totalPages: response.totalPages
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ l·∫•y danh s√°ch ng∆∞·ªùi d√πng');
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y danh s√°ch ng∆∞·ªùi d√πng:', error);
      const errorInfo = apiUtils.handleError(error);
      return { success: false, message: errorInfo.message || 'L·ªói API', data: [] };
    }
  }

  /**
   * C·∫≠p nh·∫≠t th√¥ng tin ng∆∞·ªùi d√πng (cho Admin).
   * @param {string} userId - ID c·ªßa ng∆∞·ªùi d√πng
   * @param {object} userData - D·ªØ li·ªáu c·∫≠p nh·∫≠t
   */
  async updateUser(userId, userData) {
    try {
      const endpoint = userData.role === 'driver' ? `/api/admin/drivers/${userId}` : `/api/admin/staff/${userId}`;
      console.log(`UserService: C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng ${userId} t·∫°i ${endpoint}`, userData);
      const response = await apiUtils.put(endpoint, userData);
      
      if (response.success) {
        return { success: true, data: response.data, message: 'C·∫≠p nh·∫≠t ng∆∞·ªùi d√πng th√†nh c√¥ng' };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng');
      }
    } catch (error) {
      const errorInfo = apiUtils.handleError(error);
      return { success: false, message: errorInfo.message || 'L·ªói khi c·∫≠p nh·∫≠t ng∆∞·ªùi d√πng', error: errorInfo };
    }
  }

  /**
   * T·∫°o ng∆∞·ªùi d√πng m·ªõi (cho Admin).
   * @param {object} userData - D·ªØ li·ªáu ng∆∞·ªùi d√πng m·ªõi
   */
  async createUser(userData) {
    try {
      const endpoint = userData.role === 'driver' ? '/api/admin/drivers' : '/api/admin/staff';
      console.log(`UserService: T·∫°o ng∆∞·ªùi d√πng t·∫°i ${endpoint}`, userData);
      const response = await apiUtils.post(endpoint, userData);
      
      if (response.success) {
        return { success: true, data: response.data, message: 'T·∫°o ng∆∞·ªùi d√πng th√†nh c√¥ng' };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t·∫°o ng∆∞·ªùi d√πng');
      }
    } catch (error) {
      console.error('L·ªói khi t·∫°o ng∆∞·ªùi d√πng:', error);
      const errorInfo = apiUtils.handleError(error);
      return { success: false, message: errorInfo.message || 'L·ªói khi t·∫°o ng∆∞·ªùi d√πng', error: errorInfo };
    }
  }

  /**
   * L·∫•y th√¥ng tin dashboard c·ªßa ng∆∞·ªùi d√πng (Driver) - S·ª¨ D·ª§NG API M·ªöI.
   * @param {string} userId - ID c·ªßa ng∆∞·ªùi d√πng
   */
  async getUserDashboard(userId) {
    try {
      console.log(`UserService: L·∫•y dashboard cho user ${userId} t·ª´ API m·ªõi GET /api/users/{id}`);
      
      // S·ª¨ D·ª§NG API M·ªöI: GET /api/users/{id}
      const response = await apiUtils.get(`/api/users/${userId}`);
      
      if (response.success) {
        console.log('‚úÖ API m·ªõi tr·∫£ v·ªÅ d·ªØ li·ªáu:', response);
        
        // X·ª≠ l√Ω d·ªØ li·ªáu t·ª´ API m·ªõi - D·ªÆ LI·ªÜU ·ªû ROOT LEVEL
        const user = response.user || {};
        const dashboard = response.dashboard || {};
        const vehicles = response.vehicles || [];
        
        console.log('üîç D·ªØ li·ªáu t·ª´ backend:');
        console.log('- user:', user);
        console.log('- dashboard:', dashboard);
        console.log('- vehicles:', vehicles);
        
        // T·∫°o c·∫•u tr√∫c dashboard t·ª´ d·ªØ li·ªáu API m·ªõi
        const dashboardData = {
          user: {
            id: user.userId || user.id || userId,
            name: `${user.firstName || ''} ${user.lastName || ''}`.trim() || user.name,
            email: user.email,
            phone: user.phone,
            role: user.role
          },
          vehicles: vehicles,
          dashboard: {
            totalSwaps: dashboard.totalSwaps || 0,
            activeVehicles: vehicles.length,
            monthlySpent: dashboard.monthlySpent || 0,
            totalDistance: dashboard.totalDistance || 0,
            currentPlans: dashboard.currentPlans || [],
            contracts: dashboard.contracts || [],
            // Th√™m c√°c field kh√°c t·ª´ dashboard
            vehiclePlate: dashboard.vehiclePlate,
            vehicleModel: dashboard.vehicleModel,
            contractNumber: dashboard.contractNumber,
            contractStatus: dashboard.contractStatus,
            batteryModel: dashboard.batteryModel,
            batteryHealth: dashboard.batteryHealth,
            batteryStatus: dashboard.batteryStatus
          }
        };
        
        console.log('‚úÖ Dashboard data ƒë∆∞·ª£c t·∫°o:', dashboardData);
        return { success: true, data: dashboardData, message: 'L·∫•y dashboard th√†nh c√¥ng t·ª´ API m·ªõi' };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ l·∫•y dashboard t·ª´ API m·ªõi');
      }
    } catch (error) {
      console.error('‚ùå L·ªói khi l·∫•y dashboard t·ª´ API m·ªõi:', error);
      const errorInfo = apiUtils.handleError(error);
      return { success: false, message: errorInfo.message || 'L·ªói khi l·∫•y dashboard', error: errorInfo };
    }
  }

  /**
   * L·∫•y th√¥ng tin profile c·ªßa driver.
   * @param {string} userId - ID c·ªßa driver
   */
  async getDriverProfile(userId) {
    try {
      console.log(`UserService: L·∫•y profile driver ${userId}`);
      const response = await apiUtils.get(`/api/driver/profile/${userId}`);
      
      if (response.success) {
        return { success: true, data: response.data, message: 'L·∫•y profile driver th√†nh c√¥ng' };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ l·∫•y profile driver');
      }
    } catch (error) {
      console.error('L·ªói khi l·∫•y profile driver:', error);
      const errorInfo = apiUtils.handleError(error);
      return { success: false, message: errorInfo.message || 'L·ªói khi l·∫•y profile driver', error: errorInfo };
    }
  }
}

export default new UserService();