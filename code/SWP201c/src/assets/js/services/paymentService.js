// Payment Service
// Handle payment processing and transactions

import { API_CONFIG, apiUtils } from '../config/api.js';

class PaymentService {
  async processPayment(paymentData) {
    try {
      console.log('PaymentService: Process payment', paymentData);
      
      const response = await apiUtils.post(API_CONFIG.ENDPOINTS.PAYMENTS.PROCESS, {
        amount: paymentData.amount,
        userId: paymentData.userId,
        contractId: paymentData.contractId,
        paymentMethod: paymentData.paymentMethod,
        description: paymentData.description
      });
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'Thanh to√°n th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Thanh to√°n th·∫•t b·∫°i');
      }
    } catch (error) {
      console.error('Process payment error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi x·ª≠ l√Ω thanh to√°n',
        error: errorInfo
      };
    }
  }

  async getPaymentHistory(userId) {
    try {
      console.log('PaymentService: Get payment history for user', userId);
      
      const response = await apiUtils.get(API_CONFIG.ENDPOINTS.PAYMENTS.HISTORY(userId));
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'L·∫•y l·ªãch s·ª≠ thanh to√°n th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ l·∫•y l·ªãch s·ª≠ thanh to√°n');
      }
    } catch (error) {
      console.error('Get payment history error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi l·∫•y l·ªãch s·ª≠ thanh to√°n',
        error: errorInfo
      };
    }
  }

  // Get current bill/payment status for a user
  async getCurrentPaymentStatus(userId) {
    try {
      const response = await apiUtils.get(`/api/payments/current-bill-status/user/${userId}`);
      if (response?.success) {
        return { success: true, data: response.data };
      }
      return { success: false, data: null, message: response?.message || 'Kh√¥ng th·ªÉ l·∫•y tr·∫°ng th√°i thanh to√°n hi·ªán t·∫°i' };
    } catch (error) {
      const errorInfo = apiUtils.handleError(error);
      return { success: false, data: null, message: errorInfo.message };
    }
  }

  async setupAutoPayment(userId, paymentMethod) {
    try {
      console.log('PaymentService: Setup auto payment', userId, paymentMethod);
      
      const response = await apiUtils.post(`/api/payments/auto-payment/setup`, {
        userId: userId,
        paymentMethod: paymentMethod
      });
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'Thi·∫øt l·∫≠p thanh to√°n t·ª± ƒë·ªông th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ thi·∫øt l·∫≠p thanh to√°n t·ª± ƒë·ªông');
      }
    } catch (error) {
      console.error('Setup auto payment error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi thi·∫øt l·∫≠p thanh to√°n t·ª± ƒë·ªông',
        error: errorInfo
      };
    }
  }

  async cancelAutoPayment(userId) {
    try {
      console.log('PaymentService: Cancel auto payment', userId);
      
      const response = await apiUtils.delete(`/api/payments/auto-payment/${userId}`);
      
      if (response.success) {
        return {
          success: true,
          message: 'H·ªßy thanh to√°n t·ª± ƒë·ªông th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ h·ªßy thanh to√°n t·ª± ƒë·ªông');
      }
    } catch (error) {
      console.error('Cancel auto payment error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi h·ªßy thanh to√°n t·ª± ƒë·ªông',
        error: errorInfo
      };
    }
  }

  async refundPayment(paymentId) {
    try {
      console.log('PaymentService: Refund payment', paymentId);
      
      const response = await apiUtils.post(`/api/payments/${paymentId}/refund`);
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'Ho√†n ti·ªÅn th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ ho√†n ti·ªÅn');
      }
    } catch (error) {
      console.error('Refund payment error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi ho√†n ti·ªÅn',
        error: errorInfo
      };
    }
  }

  async getPaymentMethods(userId) {
    try {
      console.log('PaymentService: Get payment methods for user', userId);
      
      const response = await apiUtils.get(`/api/payments/methods/${userId}`);
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'L·∫•y ph∆∞∆°ng th·ª©c thanh to√°n th√†nh c√¥ng'
        };
      } else {
        // Return default payment methods if API fails
        return {
          success: true,
          data: this.getDefaultPaymentMethods(),
          message: 'L·∫•y ph∆∞∆°ng th·ª©c thanh to√°n m·∫∑c ƒë·ªãnh'
        };
      }
    } catch (error) {
      console.error('Get payment methods error:', error);
      return {
        success: true,
        data: this.getDefaultPaymentMethods(),
        message: 'L·∫•y ph∆∞∆°ng th·ª©c thanh to√°n m·∫∑c ƒë·ªãnh'
      };
    }
  }

  // Helper methods
  getDefaultPaymentMethods() {
    return [
      { id: 'credit_card', name: 'Th·∫ª t√≠n d·ª•ng', icon: 'üí≥', enabled: true },
      { id: 'debit_card', name: 'Th·∫ª ghi n·ª£', icon: 'üí≥', enabled: true },
      { id: 'bank_transfer', name: 'Chuy·ªÉn kho·∫£n', icon: 'üè¶', enabled: true },
      { id: 'e_wallet', name: 'V√≠ ƒëi·ªán t·ª≠', icon: 'üì±', enabled: true },
      { id: 'cash', name: 'Ti·ªÅn m·∫∑t', icon: 'üíµ', enabled: false }
    ];
  }

  formatCurrency(amount) {
    return new Intl.NumberFormat('vi-VN', {
      style: 'currency',
      currency: 'VND'
    }).format(amount);
  }

  async calculateMonthlyBill(contractId) {
    try {
      console.log('PaymentService: Calculate monthly bill', contractId);
      
      const response = await apiUtils.post(API_CONFIG.ENDPOINTS.PAYMENTS.CALCULATE_MONTHLY(contractId));
      
      if (response.success) {
        return {
          success: true,
          data: response.data,
          message: 'T√≠nh h√≥a ƒë∆°n th√°ng th√†nh c√¥ng'
        };
      } else {
        throw new Error(response.message || 'Kh√¥ng th·ªÉ t√≠nh h√≥a ƒë∆°n th√°ng');
      }
    } catch (error) {
      console.error('Calculate monthly bill error:', error);
      const errorInfo = apiUtils.handleError(error);
      return {
        success: false,
        message: errorInfo.message || 'L·ªói khi t√≠nh h√≥a ƒë∆°n th√°ng',
        error: errorInfo
      };
    }
  }
}

export default new PaymentService();